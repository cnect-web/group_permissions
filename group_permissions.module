<?php

/**
 * @file
 * Allows you to provide custom permissions per group.
 */

define('GROUP_PERMISSIONS_GRANT_ID', 2019);

use Drupal\Core\Session\AccountInterface;
use Drupal\group_permissions\Entity\GroupPermission;
use Drupal\group\Entity\GroupInterface;
use Drupal\node\NodeInterface;
use Drupal\group_permissions\Entity\GroupPermissionInterface;
use Drupal\group\Entity\GroupContentType;

/**
 * Implements hook_entity_delete().
 */
function group_permissions_group_delete(GroupInterface $group) {
  if ($group_permissions = GroupPermission::loadByGroup($group) ) {
    $group_permissions->delete();
  }
}

/**
 * Implements hook_node_grants().
 *
 * We define the following grants:
 * - 'group_permissions:NODE_TYPE': Grants view and update or delete any access to nodes.
 * - 'group_permissions_unpublished:NODE_TYPE': Grants view access to unpublished nodes.
 * - 'group_permissions_author:UID:NODE_TYPE': Grants update or delete access to authors.
 * - 'group_permissions_anonymous': Given to anonymous users.
 * - 'group_permissions_bypass': Given to anyone with the 'bypass group access' permission.
 *
 * @see group_permissions_node_access_records()
 */
function group_permissions_node_grants(AccountInterface $account, $op) {
  $grants =  \Drupal::service('group_permission.group_permissions_node_access_records_builder')->grantAccess($account, $op);
  return $grants;
}

/**
 * Implements hook_node_access_records().
 *
 * @see group_permissions_node_grants()
 */
function group_permissions_node_access_records(NodeInterface $node) {
  $records = \Drupal::service('group_permission.group_permissions_node_access_records_builder')->buildAccessRecords($node);
  return $records;
}

/**
 * Implements hook_node_access_records_alter().
 */
function group_permissions_node_access_records_alter(&$grants, Drupal\node\NodeInterface $node) {
  // We drop all records set by gnode.
  foreach ($grants as $key => $grant) {
    if (strpos($grant['realm'], 'gnode') !== FALSE) {
      unset($grants[$key]);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Group permissions was updated we need to rebuild node access records dynamically.
 */
function group_permissions_group_permission_update(GroupPermissionInterface $entity) {
  // First we get all GroupContentTypes related to nodes.
  $group_content_types = GroupContentType::loadByEntityTypeId('node');

  $storage = \Drupal::entityTypeManager()->getStorage('group_content');
  $group_nodes = [];

  foreach ($group_content_types as $group_content_type){
    $group_nodes = array_merge($group_nodes, $storage->loadByGroup($entity->getGroup(), $group_content_type->getContentPluginId()));
  }

  // Rebuild access records for all group nodes.
  foreach ($group_nodes as $group_node){
    $node = $group_node->getEntity();
    $access_record =  \Drupal::service('group_permission.group_permissions_node_access_records_builder')->buildAccessRecords($node);
    \Drupal::service('node.grant_storage')->write($node, $access_record, NULL);
  }

}
