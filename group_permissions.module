<?php

/**
 * @file
 * Allows you to provide custom permissions per group.
 */

define('GROUP_PERMISSIONS_GRANT_ID', 2019);

use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\group_permissions\Entity\GroupPermission;
use Drupal\group\Entity\GroupInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_delete().
 */
function group_permissions_group_delete(GroupInterface $group) {
  if ($group_permissions = GroupPermission::loadByGroup($group) ) {
    $group_permissions->delete();
  }
}

/**
 * Implements hook_node_grants().
 *
 * We define the following grants:
 * - 'group_permissions:NODE_TYPE': Grants view and update or delete any access to nodes.
 * - 'group_permissions_unpublished:NODE_TYPE': Grants view access to unpublished nodes.
 * - 'group_permissions_author:UID:NODE_TYPE': Grants update or delete access to authors.
 * - 'group_permissions_anonymous': Given to anonymous users.
 * - 'group_permissions_bypass': Given to anyone with the 'bypass group access' permission.
 *
 * @see group_permissions_node_access_records()
 */
function group_permissions_node_grants(AccountInterface $account, $op) {
  $grants_cache = &drupal_static(__FUNCTION__, []);

  if (isset($grants_cache[$account->id()][$op])) {
    return $grants_cache[$account->id()][$op];
  }

  // Anonymous users get the anonymous grant. See the implementation in the
  // fut_group_node_access_records() function as to why that is.
  if ($account->isAnonymous()) {
    return ['group_permissions:anonymous' => [GROUP_PERMISSIONS_GRANT_ID]];
  }

  $grants = [];
  $grants['group_permissions:outsider'] = [GROUP_PERMISSIONS_GRANT_ID];

  /** @var \Drupal\group_permissions\GroupPermissionsManager $group_permissions_manager */
  $group_permissions_manager = \Drupal::service('group_permission.group_permissions_manager');

  // Initialize a grant array for members and one for outsider users.
  $membership_loader = \Drupal::service('group.membership_loader');
  foreach ($membership_loader->loadByUser($account) as $group_membership) {
    $group = $group_membership->getGroup();

    $member_roles = $group_membership->getRoles();
    foreach ($member_roles as $role_id => $role) {
      $grants["group_permissions:$role_id"][] = $group->id();
    }

    $outsider_roles = $group_permissions_manager->getOutsiderRoles($group);
    foreach ($outsider_roles as $role_id => $role) {
      $grants["group_permissions:$role_id"][] = $group->id();
    }
  }

  // Recursively merge the member grants with the outsider grants.
  $grants_cache[$account->id()][$op] = $grants;

  return $grants_cache[$account->id()][$op];
}

/**
 * Implements hook_node_access_records().
 *
 * @see group_permissions_node_grants()
 */
function group_permissions_node_access_records(NodeInterface $node) {
  $records = \Drupal::service('group_permission.group_permissions_access_records_builder')->buildAccessRecords($node);
  return $records;
}

/**
 * Implements hook_node_access_records_alter().
 */
function group_permissions_node_access_records_alter(&$grants, Drupal\node\NodeInterface $node) {
  // We drop all records set by gnode.
  foreach ($grants as $key => $grant) {
    if (strpos($grant['realm'], 'gnode') !== FALSE) {
      unset($grants[$key]);
    }
  }
}
